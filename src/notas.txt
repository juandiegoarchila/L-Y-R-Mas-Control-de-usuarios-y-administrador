Funcinamiento del reCAPTCHA al tener un dominio 

signup 
<%- include('../layouts/Users-Cabecera.ejs') %>


<%- include('../partials/errors.ejs') %>


<br><br>
<div class="container">
  <form action="/users/signup" method="post">
    <div class="form-group">
      <h1>Registro</h1>
      <input type="text" name="name" placeholder="Nombre" required>
    </div>
    <div class="form-group">
      <input type="email" name="email" placeholder="Correo Electrónico" required>
    </div>
    <div class="form-group">
      <input type="password" name="password" placeholder="Contraseña" required>
    </div>
    <div class="form-group">
      <input type="password" name="confirm_password" placeholder="Confirmar Contraseña" required>
    </div>
    <div class="form-group form-check">
      <input type="checkbox" class="form-check-input" id="acceptTerms" required>
      <label class="form-check-label" for="acceptTerms">Acepto términos y condiciones de la plataforma</label>
    </div>
    <div class="g-recaptcha" data-sitekey="6LdwYQEpAAAAACmv3x_ntSPkSiyKVVnsWbyYY9ZF"></div>

    <button type="submit">Registrarse</button>

    <a href="/users/signin" class="btn">Iniciar Sesión</a>
  </form>
</div>

<%- include('../layouts/Users-Pie.ejs') %>


Usercontroller.js 
const { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, sendEmailVerification } = require('firebase/auth');
const { getFirestore, collection, addDoc } = require('firebase/firestore');
const axios = require('axios');

const app = require('../config/Conexion');

const userCtrol = {};

userCtrol.rendersignupForm = (req, res) => {
  res.render('users/signup');
};

userCtrol.signup = async (req, res) => {
  const { name, email, password, confirm_password, 'g-recaptcha-response': recaptchaResponse } = req.body;
  const auth = getAuth(app);
  const firestore = getFirestore(app);

  // Verifica si el reCAPTCHA se ha resuelto
  if (!recaptchaResponse) {
    req.flash('error_msg', 'Por favor, completa el reCAPTCHA.');
    return res.redirect('/users/signup');
  }

  // Realiza la verificación del reCAPTCHA con Google
  const secretKey = '6LdwYQEpAAAAACmv3x_ntSPkSiyKVVnsWbyYY9ZF'; // Reemplaza con tu clave secreta
  const verificationURL = `https://www.google.com/recaptcha/api/siteverify?secret=${secretKey}&response=${recaptchaResponse}`;

  try {
    const recaptchaVerification = await axios.post(verificationURL);
    if (!recaptchaVerification.data.success) {
      req.flash('error_msg', 'Falló la verificación del reCAPTCHA. ¿Eres un robot?');
      return res.redirect('/users/signup');
    }
  } catch (error) {
    console.error('Error al verificar reCAPTCHA:', error);
    req.flash('error_msg', 'Error al verificar el reCAPTCHA.');
    return res.redirect('/users/signup');
  }

  if (password !== confirm_password) {
    req.flash('error_msg', 'Las contraseñas no coinciden');
    return res.redirect('/users/signup');
  }

  if (password.length < 6) {
    req.flash('error_msg', 'La contraseña debe tener al menos 6 caracteres');
    return res.redirect('/users/signup');
  }

  try {
    // Crea un nuevo usuario con Firebase Authentication
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // Envía un correo de verificación al usuario
    await sendEmailVerification(user);

    // Guarda la información del usuario en Firestore
    const userRef = collection(firestore, 'users');
    await addDoc(userRef, {
      uid: user.uid,
      name: name,
      email: email,
    });

    req.flash('success_msg', '¡Registro exitoso! Se ha enviado un correo de verificación a tu dirección de correo electrónico.');
    res.redirect('/users/signin');
  } catch (error) {
    console.error('Error al crear el usuario:', error);
    req.flash('error_msg', 'Error al crear el usuario');
    res.redirect('/users/signup');
  }
};





userCtrol.rendersigninForm = (req, res) => {
  res.render('users/signin');
};

userCtrol.signin = async (req, res, next) => {
  const { email, password } = req.body;
  const auth = getAuth(app);

  try {
    // Inicia sesión con Firebase Authentication
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    if (!user.emailVerified) {
      // El usuario no ha verificado su correo electrónico
      req.flash('error_msg', 'Debes verificar tu correo electrónico antes de iniciar sesión.');
      return res.redirect('/users/signin');
    }

    req.flash('success_msg', '¡Sesión iniciada!');
    res.redirect('/crud'); // Redirige al "crud" o la página que desees.
  } catch (error) {
    console.error('Usuario o contraseña incorrectos', error);
    req.flash('error_msg', 'Usuario o contraseña incorrectos');
    res.redirect('/users/signin');
  }
};


userCtrol.logout = (req, res) => {
  const auth = getAuth(app);

  signOut(auth)
    .then(() => {
      req.flash('success_msg', 'Sesión cerrada exitosamente');
      res.redirect('/users/signin');
    })
    .catch((error) => {
      console.error('Error al cerrar sesión:', error);
      req.flash('error_msg', 'Error al cerrar sesión');
      res.redirect('/');
    });
},

// Renderiza el formulario para restablecer la contraseña
userCtrol.renderForgotPasswordForm = (req, res) => {
  res.render('users/forgot-password');
};

// Procesa la solicitud de restablecimiento de contraseña
userCtrol.forgotPassword = async (req, res) => {
  const { email } = req.body;
  const auth = getAuth(app);

  try {
    // Envía un correo electrónico para restablecer la contraseña
    await sendPasswordResetEmail(auth, email);
    req.flash('success_msg', 'Se ha enviado un correo electrónico para restablecer tu contraseña.');
    res.redirect('/users/signin'); // Redirige a la página de inicio de sesión.
  } catch (error) {
    console.error('Error al enviar el correo electrónico de restablecimiento de contraseña:', error);
    req.flash('error_msg', 'Error al enviar el correo electrónico de restablecimiento de contraseña');
    res.redirect('/users/forgot-password');
  }
},

module.exports = userCtrol;


users-cabecera.ejs 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://www.google.com/recaptcha/enterprise.js?render=6LdwYQEpAAAAACmv3x_ntSPkSiyKVVnsWbyYY9ZF" async defer></script>

    <link rel="stylesheet" href="/User.css">
    
    <title>Hola</title>
</head>
<body >
            


















            <%- include('../layouts/Users-Cabecera.ejs') %>

<div class="col-md-4 mx-auto">
  <%- include('../partials/errors.ejs') %>
</div>

<div class="container">
  <form action="/users/profile" method="post" enctype="multipart/form-data">
    <div class="form-group">
      <h1>Actualizar perfil</h1>
    </div>

    <label for="profileImage" class="profile-image-label">
      <!-- Agrega un elemento img para mostrar la previsualización -->
      <img class="profile-image" src="<%= profileImageUrl || '/imagenes/avatar.jpg' %>" alt="Perfil de <%= name %>" id="previewImage">
      <!-- Agrega el input de la imagen -->
      <input type="file" name="profileImage" accept="image/*" id="profileImage" style="display:none;" onchange="handleImageChange(this)">
    </label>

    <div class="form-group">
      <label for="name">Nombre:</label>
      <input type="text" name="name" value="<%= name || '' %>" required>
    </div>
    
    <div class="form-group">
      <label for="email">Correo Electrónico:</label>
      <input type="email" name="email" value="<%= email || '' %>" required>
    </div>

    <input type="hidden" name="uid" value="<%= uid %>" readonly>
    <button type="submit" class="btn btn-primary">Actualizar</button>
    
    <!-- Agrega el botón para eliminar la foto de perfil -->
    <button type="submit" formaction="/users/delete-profile-image" class="btn btn-danger">Eliminar Foto de Perfil</button>

    <a class="btn btn-primary" href="/crud">Volver</a>
  </form>
</div>

<%- include('../layouts/Users-Pie.ejs') %>



















const { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, sendEmailVerification, updateProfile } = require('firebase/auth');
const { getFirestore, collection, where, getDocs, query, addDoc, updateDoc, getDoc, deleteDoc } = require('firebase/firestore');
const { getStorage, ref, uploadBytes , getDownloadURL, deleteObject } = require('firebase/storage');
const app = require('../config/Conexion');
const debug = require('debug')('app:profile');
const userCtrol = {};
userCtrol.rendersignupForm = (req, res) => {
  res.render('users/signup');
};
userCtrol.signup = async (req, res) => {
  const { name, email, password, confirm_password } = req.body;
  const auth = getAuth(app);
  const firestore = getFirestore(app);

  if (password !== confirm_password) {
    req.flash('error_msg', 'Las contraseñas no coinciden');
    return res.redirect('/users/signup');
  }

  if (password.length < 6) {
    req.flash('error_msg', 'La contraseña debe tener al menos 6 caracteres');
    return res.redirect('/users/signup');
  }

  try {
    // Crea un nuevo usuario con Firebase Authentication
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    // Envía un correo de verificación al usuario
    await sendEmailVerification(user);

    // Guarda la información del usuario en Firestore
    const userRef = collection(firestore, 'users');
    await addDoc(userRef, {
      uid: user.uid,
      name: name,
      email: email,
    });

    req.flash('success_msg', '¡Registro exitoso! Se ha enviado un correo de verificación a tu dirección de correo electrónico.');
    res.redirect('/users/signin');
  } catch (error) {
    console.error('Error al crear el usuario:', error);
    req.flash('error_msg', 'Error al crear el usuario');
    res.redirect('/users/signup');
  }
};


userCtrol.rendersigninForm = (req, res) => {
  res.render('users/signin');
};

userCtrol.signin = async (req, res, next) => {
  const { email, password } = req.body;
  const auth = getAuth(app);

  try {
    // Inicia sesión con Firebase Authentication
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;

    if (!user.emailVerified) {
      req.flash('error_msg', 'Debes verificar tu correo electrónico antes de iniciar sesión.');
      return res.redirect('/users/signin');
    }

    req.flash('success_msg', '¡Sesión iniciada!');
    res.redirect('/crud'); // Redirige al "crud" o la página que desees.
  } catch (error) {
    console.error('Usuario o contraseña incorrectos', error);
    req.flash('error_msg', 'Usuario o contraseña incorrectos');
    res.redirect('/users/signin');
  }
};


userCtrol.logout = (req, res) => {
  const auth = getAuth(app);

  signOut(auth)
    .then(() => {
      req.flash('success_msg', 'Sesión cerrada exitosamente');
      res.redirect('/users/signin');
    })
    .catch((error) => {
      console.error('Error al cerrar sesión:', error);
      req.flash('error_msg', 'Error al cerrar sesión');
      res.redirect('/');
    });
},

// Renderiza el formulario para restablecer la contraseña
userCtrol.renderForgotPasswordForm = (req, res) => {
  res.render('users/forgot-password');
};

// Procesa la solicitud de restablecimiento de contraseña
userCtrol.forgotPassword = async (req, res) => {
  const { email } = req.body;
  const auth = getAuth(app);

  try {
    // Envía un correo electrónico para restablecer la contraseña
    await sendPasswordResetEmail(auth, email);
    req.flash('success_msg', 'Se ha enviado un correo electrónico para restablecer tu contraseña.');
    res.redirect('/users/signin'); // Redirige a la página de inicio de sesión.
  } catch (error) {
    console.error('Error al enviar el correo electrónico de restablecimiento de contraseña:', error);
    req.flash('error_msg', 'Error al enviar el correo electrónico de restablecimiento de contraseña');
    res.redirect('/users/forgot-password');
  }
};
userCtrol.renderProfile = async (req, res) => {
  const auth = getAuth(app);
  const user = auth.currentUser;

  if (user) {
    const firestore = getFirestore(app);
    const userRef = collection(firestore, 'users');
    const userQuery = query(userRef, where('uid', '==', user.uid));

    try {
      const querySnapshot = await getDocs(userQuery);

      if (!querySnapshot.empty) {
        const userData = querySnapshot.docs[0].data();

        let profileImageUrl = userData.profileImageUrl;

        if (profileImageUrl) {
          const storage = getStorage(app);
          const profileImageRef = ref(storage, profileImageUrl);
          profileImageUrl = await getDownloadURL(profileImageRef);
        }

        // Renderiza la vista con los datos del usuario y la URL de la imagen
        return res.render('users/profile', { name: userData.name, email: userData.email, uid: user.uid, profileImageUrl });
      } else {
        req.flash('error_msg', 'No se encontró información del usuario.');
        return res.redirect('/users/signin');
      }
    } catch (error) {
      console.error('Error al consultar Firestore:', error);
      req.flash('error_msg', 'Error al consultar Firestore');
      return res.redirect('/users/signin');
    }
  } else {
    req.flash('error_msg', 'Debes iniciar sesión para ver tu perfil.');
    return res.redirect('/users/signin');
  }
};

userCtrol.updateProfile = async (req, res) => {
  const auth = getAuth(app);
  const user = auth.currentUser;

  if (user) {
    const { name, email } = req.body;

    const firestore = getFirestore(app);
    const userRef = collection(firestore, 'users');
    const userQuery = query(userRef, where('uid', '==', user.uid));

    try {
      const querySnapshot = await getDocs(userQuery);

      if (!querySnapshot.empty) {
        const userDocRef = querySnapshot.docs[0].ref;
        const userData = querySnapshot.docs[0].data();
        let profileImageUrl = userData.profileImageUrl;

        if (req.files && req.files.profileImage) {
          const storage = getStorage(app);

          if (profileImageUrl) {
            const previousImageRef = ref(storage, profileImageUrl);
            try {
              await deleteObject(previousImageRef);
              debug('Previous profile image deleted successfully!');
            } catch (error) {
              console.error('Error deleting previous profile image:', error);
              req.flash('error_msg', 'Hubo un error al eliminar la imagen anterior.');
              return res.redirect('/users/profile');
            }
          }

          const profileImageRef = ref(storage, `Avatar/${Date.now()}_${req.files.profileImage[0].originalname}`);

          try {
            await uploadBytes(profileImageRef, req.files.profileImage[0].buffer, {
              contentType: req.files.profileImage[0].mimetype
            });

            profileImageUrl = await getDownloadURL(profileImageRef);
            await updateDoc(userDocRef, { profileImageUrl });

            debug('Profile image uploaded successfully!');
          } catch (error) {
            console.error('Error uploading profile image:', error);
            req.flash('error_msg', 'Hubo un error al subir la nueva imagen. Por favor, inténtalo de nuevo más tarde.');
            return res.redirect('/users/profile');
          }
        }

        await updateDoc(userDocRef, {
          name: name,
          email: email
        });

        await updateProfile(user, { displayName: name, email: email });

        if (!profileImageUrl) {
          profileImageUrl = '/imagenes/default-avatar.jpg';
          await updateDoc(userDocRef, { profileImageUrl });
        }

        req.flash('success_msg', 'Perfil actualizado exitosamente');
        // Cambio: En lugar de renderizar, redirige directamente con el mensaje
        return res.redirect('/users/profile');
      } else {
        req.flash('error_msg', 'No se encontró información del usuario para actualizar.');
        return res.redirect('/users/profile');
      }
    } catch (error) {
      console.error('Error al actualizar el perfil:', error);
      req.flash('error_msg', 'Hubo un error al actualizar el perfil. Por favor, inténtalo de nuevo más tarde.');
      return res.redirect('/users/profile');
    }
  } else {
    req.flash('error_msg', 'Debes iniciar sesión para actualizar tu perfil.');
    return res.redirect('/users/signin');
  }
};

// Importa las funciones necesarias (ejemplo: deleteObject, ref, updateDoc, etc.)

userCtrol.deleteProfileImage = async (req, res) => {
  const auth = getAuth(app);
  const user = auth.currentUser;

  if (user) {
    const firestore = getFirestore(app);
    const userRef = collection(firestore, 'users');
    const userQuery = query(userRef, where('uid', '==', user.uid));

    try {
      const querySnapshot = await getDocs(userQuery);

      if (!querySnapshot.empty) {
        const userDocRef = querySnapshot.docs[0].ref;
        const userData = querySnapshot.docs[0].data();
        let profileImageUrl = userData.profileImageUrl;

        if (profileImageUrl) {
          const storage = getStorage(app);
          const profileImageRef = ref(storage, profileImageUrl);

          try {
            // Elimina la imagen de perfil del almacenamiento
            await deleteObject(profileImageRef);
            debug('Profile image deleted successfully!');
          } catch (error) {
            console.error('Error deleting profile image:', error);
            req.flash('error_msg', 'Hubo un error al eliminar la imagen de perfil.');
            return res.redirect('/users/profile');
          }

          // Actualiza el campo profileImageUrl a null o un valor predeterminado en la base de datos
          await updateDoc(userDocRef, { profileImageUrl: null });

          req.flash('success_msg', 'Foto de perfil eliminada exitosamente');
          return res.redirect('/users/profile');
        } else {
          req.flash('error_msg', 'No hay foto de perfil para eliminar.');
          return res.redirect('/users/profile');
        }
      } else {
        req.flash('error_msg', 'No se encontró información del usuario para eliminar la foto de perfil.');
        return res.redirect('/users/profile');
      }
    } catch (error) {
      console.error('Error al eliminar la foto de perfil:', error);
      req.flash('error_msg', 'Hubo un error al eliminar la foto de perfil. Por favor, inténtalo de nuevo más tarde.');
      return res.redirect('/users/profile');
    }
  } else {
    req.flash('error_msg', 'Debes iniciar sesión para eliminar tu foto de perfil.');
    return res.redirect('/users/signin');
  }
};


module.exports = userCtrol;





















    const express = require('express');
    const multer = require('multer');
    const upload = multer(); // Configuración por defecto de multer para manejar archivos en memoria
    const router = express.Router();
    const userCtrol = require('../controllers/UsersController');

    // Middleware de multer para manejar la carga de archivos en memoria
    router.use(upload.fields([{ name: 'profileImage', maxCount: 1 }]));
    // Ruta para mostrar el formulario de registro
    router.get('/signup', userCtrol.rendersignupForm);

    // Ruta para manejar el registro de usuarios
    router.post('/signup', userCtrol.signup);

    // Ruta para mostrar el formulario de inicio de sesión
    router.get('/signin', userCtrol.rendersigninForm);

    // Ruta para manejar el inicio de sesión de usuarios
    router.post('/signin', userCtrol.signin);

    router.get('/logout', userCtrol.logout);

    router.get('/forgot-password', userCtrol.renderForgotPasswordForm);

    // Ruta para manejar la solicitud de restablecimiento de contraseña
    router.post('/forgot-password', userCtrol.forgotPassword);

    // Ruta para ver el perfil del usuario
    router.get('/profile', userCtrol.renderProfile);

    // Ruta para actualizar el perfil del usuario (nueva ruta)
    router.post('/profile', userCtrol.updateProfile);
    router.post('/delete-profile-image', userCtrol.deleteProfileImage);



    module.exports = router;
